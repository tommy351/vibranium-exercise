x-db-name: &db-name vibranium
x-db-user: &db-user vibranium
x-db-password: &db-password secret-vibranium-password

services:
  tunnel:
    image: cloudflare/cloudflared:2025.2.1
    command: tunnel --no-autoupdate run
    env_file: .env
    depends_on:
      dev:
        condition: service_healthy
  node: &service-node
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - .:/app:rw,z
    working_dir: /app
    environment: &service-node-env
      DB_HOST: postgres
      DB_USER: *db-user
      DB_NAME: *db-name
      DB_PASSWORD: *db-password
      COREPACK_ENABLE_DOWNLOAD_PROMPT: "0"
  dev:
    <<: *service-node
    entrypoint: pnpm
    command: dev --host
    environment:
      <<: *service-node-env
      ALLOW_ANY_HOST: "true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173/healthz"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10
    ports:
      - "5173:5173"
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: pgvector/pgvector:0.8.0-pg17
    environment:
      POSTGRES_DB: *db-name
      POSTGRES_USER: *db-user
      POSTGRES_PASSWORD: *db-password
    command: postgres -c listen_addresses=*
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./test/pg-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "pg_isready -U $POSTGRES_USER"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10
  drizzle:
    <<: *service-node
    entrypoint: pnpm drizzle-kit
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  pg-data:
